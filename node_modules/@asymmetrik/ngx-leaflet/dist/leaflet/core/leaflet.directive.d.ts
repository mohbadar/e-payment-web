import { ElementRef, EventEmitter, NgZone, OnChanges, OnInit, SimpleChange } from '@angular/core';
import { LatLng, LatLngBounds, LeafletEvent, LeafletMouseEvent, Map, MapOptions } from 'leaflet';
import * as ɵngcc0 from '@angular/core';
export declare class LeafletDirective implements OnChanges, OnInit {
    private element;
    private zone;
    readonly DEFAULT_ZOOM = 1;
    readonly DEFAULT_CENTER: LatLng;
    readonly DEFAULT_FPZ_OPTIONS: {};
    resizeTimer: any;
    map: Map;
    fitBoundsOptions: {};
    panOptions: {};
    zoomOptions: {};
    zoomPanOptions: {};
    options: MapOptions;
    mapReady: EventEmitter<Map>;
    zoom: number;
    zoomChange: EventEmitter<number>;
    center: LatLng;
    centerChange: EventEmitter<LatLng>;
    fitBounds: LatLngBounds;
    maxBounds: LatLngBounds;
    minZoom: number;
    maxZoom: number;
    onClick: EventEmitter<LeafletMouseEvent>;
    onDoubleClick: EventEmitter<LeafletMouseEvent>;
    onMouseDown: EventEmitter<LeafletMouseEvent>;
    onMouseUp: EventEmitter<LeafletMouseEvent>;
    onMouseMove: EventEmitter<LeafletMouseEvent>;
    onMouseOver: EventEmitter<LeafletMouseEvent>;
    onMouseOut: EventEmitter<LeafletMouseEvent>;
    onMapMove: EventEmitter<LeafletEvent>;
    onMapMoveStart: EventEmitter<LeafletEvent>;
    onMapMoveEnd: EventEmitter<LeafletEvent>;
    onMapZoom: EventEmitter<LeafletEvent>;
    onMapZoomStart: EventEmitter<LeafletEvent>;
    onMapZoomEnd: EventEmitter<LeafletEvent>;
    constructor(element: ElementRef, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [key: string]: SimpleChange;
    }): void;
    getMap(): Map;
    onResize(): void;
    private addMapEventListeners;
    /**
     * Resize the map to fit it's parent container
     */
    private doResize;
    /**
     * Manage a delayed resize of the component
     */
    private delayResize;
    /**
     * Set the view (center/zoom) all at once
     * @param center The new center
     * @param zoom The new zoom level
     */
    private setView;
    /**
     * Set the map zoom level
     * @param zoom the new zoom level for the map
     */
    private setZoom;
    /**
     * Set the center of the map
     * @param center the center point
     */
    private setCenter;
    /**
     * Fit the map to the bounds
     * @param latLngBounds the boundary to set
     */
    private setFitBounds;
    /**
     * Set the map's max bounds
     * @param latLngBounds the boundary to set
     */
    private setMaxBounds;
    /**
     * Set the map's min zoom
     * @param number the new min zoom
     */
    private setMinZoom;
    /**
     * Set the map's min zoom
     * @param number the new min zoom
     */
    private setMaxZoom;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletDirective, "[leaflet]", never, { "fitBoundsOptions": "leafletFitBoundsOptions"; "panOptions": "leafletPanOptions"; "zoomOptions": "leafletZoomOptions"; "zoomPanOptions": "leafletZoomPanOptions"; "options": "leafletOptions"; "zoom": "leafletZoom"; "center": "leafletCenter"; "fitBounds": "leafletFitBounds"; "maxBounds": "leafletMaxBounds"; "minZoom": "leafletMinZoom"; "maxZoom": "leafletMaxZoom"; }, { "mapReady": "leafletMapReady"; "zoomChange": "leafletZoomChange"; "centerChange": "leafletCenterChange"; "onClick": "leafletClick"; "onDoubleClick": "leafletDoubleClick"; "onMouseDown": "leafletMouseDown"; "onMouseUp": "leafletMouseUp"; "onMouseMove": "leafletMouseMove"; "onMouseOver": "leafletMouseOver"; "onMouseOut": "leafletMouseOut"; "onMapMove": "leafletMapMove"; "onMapMoveStart": "leafletMapMoveStart"; "onMapMoveEnd": "leafletMapMoveEnd"; "onMapZoom": "leafletMapZoom"; "onMapZoomStart": "leafletMapZoomStart"; "onMapZoomEnd": "leafletMapZoomEnd"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibGVhZmxldC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGF0TG5nLCBMYXRMbmdCb3VuZHMsIExlYWZsZXRFdmVudCwgTGVhZmxldE1vdXNlRXZlbnQsIE1hcCwgTWFwT3B0aW9ucyB9IGZyb20gJ2xlYWZsZXQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGVhZmxldERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHJlYWRvbmx5IERFRkFVTFRfWk9PTSA9IDE7XG4gICAgcmVhZG9ubHkgREVGQVVMVF9DRU5URVI6IExhdExuZztcbiAgICByZWFkb25seSBERUZBVUxUX0ZQWl9PUFRJT05TOiB7fTtcbiAgICByZXNpemVUaW1lcjogYW55O1xuICAgIG1hcDogTWFwO1xuICAgIGZpdEJvdW5kc09wdGlvbnM6IHt9O1xuICAgIHBhbk9wdGlvbnM6IHt9O1xuICAgIHpvb21PcHRpb25zOiB7fTtcbiAgICB6b29tUGFuT3B0aW9uczoge307XG4gICAgb3B0aW9uczogTWFwT3B0aW9ucztcbiAgICBtYXBSZWFkeTogRXZlbnRFbWl0dGVyPE1hcD47XG4gICAgem9vbTogbnVtYmVyO1xuICAgIHpvb21DaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIGNlbnRlcjogTGF0TG5nO1xuICAgIGNlbnRlckNoYW5nZTogRXZlbnRFbWl0dGVyPExhdExuZz47XG4gICAgZml0Qm91bmRzOiBMYXRMbmdCb3VuZHM7XG4gICAgbWF4Qm91bmRzOiBMYXRMbmdCb3VuZHM7XG4gICAgbWluWm9vbTogbnVtYmVyO1xuICAgIG1heFpvb206IG51bWJlcjtcbiAgICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8TGVhZmxldE1vdXNlRXZlbnQ+O1xuICAgIG9uRG91YmxlQ2xpY2s6IEV2ZW50RW1pdHRlcjxMZWFmbGV0TW91c2VFdmVudD47XG4gICAgb25Nb3VzZURvd246IEV2ZW50RW1pdHRlcjxMZWFmbGV0TW91c2VFdmVudD47XG4gICAgb25Nb3VzZVVwOiBFdmVudEVtaXR0ZXI8TGVhZmxldE1vdXNlRXZlbnQ+O1xuICAgIG9uTW91c2VNb3ZlOiBFdmVudEVtaXR0ZXI8TGVhZmxldE1vdXNlRXZlbnQ+O1xuICAgIG9uTW91c2VPdmVyOiBFdmVudEVtaXR0ZXI8TGVhZmxldE1vdXNlRXZlbnQ+O1xuICAgIG9uTW91c2VPdXQ6IEV2ZW50RW1pdHRlcjxMZWFmbGV0TW91c2VFdmVudD47XG4gICAgb25NYXBNb3ZlOiBFdmVudEVtaXR0ZXI8TGVhZmxldEV2ZW50PjtcbiAgICBvbk1hcE1vdmVTdGFydDogRXZlbnRFbWl0dGVyPExlYWZsZXRFdmVudD47XG4gICAgb25NYXBNb3ZlRW5kOiBFdmVudEVtaXR0ZXI8TGVhZmxldEV2ZW50PjtcbiAgICBvbk1hcFpvb206IEV2ZW50RW1pdHRlcjxMZWFmbGV0RXZlbnQ+O1xuICAgIG9uTWFwWm9vbVN0YXJ0OiBFdmVudEVtaXR0ZXI8TGVhZmxldEV2ZW50PjtcbiAgICBvbk1hcFpvb21FbmQ6IEV2ZW50RW1pdHRlcjxMZWFmbGV0RXZlbnQ+O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcbiAgICB9KTogdm9pZDtcbiAgICBnZXRNYXAoKTogTWFwO1xuICAgIG9uUmVzaXplKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhZGRNYXBFdmVudExpc3RlbmVycztcbiAgICAvKipcbiAgICAgKiBSZXNpemUgdGhlIG1hcCB0byBmaXQgaXQncyBwYXJlbnQgY29udGFpbmVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBkb1Jlc2l6ZTtcbiAgICAvKipcbiAgICAgKiBNYW5hZ2UgYSBkZWxheWVkIHJlc2l6ZSBvZiB0aGUgY29tcG9uZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBkZWxheVJlc2l6ZTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZpZXcgKGNlbnRlci96b29tKSBhbGwgYXQgb25jZVxuICAgICAqIEBwYXJhbSBjZW50ZXIgVGhlIG5ldyBjZW50ZXJcbiAgICAgKiBAcGFyYW0gem9vbSBUaGUgbmV3IHpvb20gbGV2ZWxcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldFZpZXc7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBtYXAgem9vbSBsZXZlbFxuICAgICAqIEBwYXJhbSB6b29tIHRoZSBuZXcgem9vbSBsZXZlbCBmb3IgdGhlIG1hcFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0Wm9vbTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNlbnRlciBvZiB0aGUgbWFwXG4gICAgICogQHBhcmFtIGNlbnRlciB0aGUgY2VudGVyIHBvaW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRDZW50ZXI7XG4gICAgLyoqXG4gICAgICogRml0IHRoZSBtYXAgdG8gdGhlIGJvdW5kc1xuICAgICAqIEBwYXJhbSBsYXRMbmdCb3VuZHMgdGhlIGJvdW5kYXJ5IHRvIHNldFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0Rml0Qm91bmRzO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbWFwJ3MgbWF4IGJvdW5kc1xuICAgICAqIEBwYXJhbSBsYXRMbmdCb3VuZHMgdGhlIGJvdW5kYXJ5IHRvIHNldFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0TWF4Qm91bmRzO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbWFwJ3MgbWluIHpvb21cbiAgICAgKiBAcGFyYW0gbnVtYmVyIHRoZSBuZXcgbWluIHpvb21cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldE1pblpvb207XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBtYXAncyBtaW4gem9vbVxuICAgICAqIEBwYXJhbSBudW1iZXIgdGhlIG5ldyBtaW4gem9vbVxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0TWF4Wm9vbTtcbn1cbiJdfQ==
import { DoCheck, IterableDiffer, IterableDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';
import { Layer } from 'leaflet';
import { LeafletDirective } from '../core/leaflet.directive';
/**
 * Layers directive
 *
 * This directive is used to directly control map layers. As changes are made to the input array of
 * layers, the map is synched to the array. As layers are added or removed from the input array, they
 * are also added or removed from the map. The input array is treated as immutable. To detect changes,
 * you must change the array instance.
 *
 * Important Note: The input layers array is assumed to be immutable. This means you need to use an
 * immutable array implementation or create a new copy of your array when you make changes, otherwise
 * this directive won't detect the change. This is by design. It's for performance reasons. Change
 * detection of mutable arrays requires diffing the state of the array on every DoCheck cycle, which
 * is extremely expensive from a time complexity perspective.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class LeafletLayersDirective implements DoCheck, OnDestroy, OnInit {
    private differs;
    private zone;
    layersValue: Layer[];
    layersDiffer: IterableDiffer<Layer>;
    set layers(v: Layer[]);
    get layers(): Layer[];
    private leafletDirective;
    constructor(leafletDirective: LeafletDirective, differs: IterableDiffers, zone: NgZone);
    ngDoCheck(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Update the state of the layers.
     * We use an iterable differ to synchronize the map layers with the state of the bound layers array.
     * This is important because it allows us to react to changes to the contents of the array as well
     * as changes to the actual array instance.
     */
    private updateLayers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletLayersDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletLayersDirective, "[leafletLayers]", never, { "layers": "leafletLayers"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC1sYXllcnMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImxlYWZsZXQtbGF5ZXJzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb0NoZWNrLCBJdGVyYWJsZURpZmZlciwgSXRlcmFibGVEaWZmZXJzLCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJ2xlYWZsZXQnO1xuaW1wb3J0IHsgTGVhZmxldERpcmVjdGl2ZSB9IGZyb20gJy4uL2NvcmUvbGVhZmxldC5kaXJlY3RpdmUnO1xuLyoqXG4gKiBMYXllcnMgZGlyZWN0aXZlXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgaXMgdXNlZCB0byBkaXJlY3RseSBjb250cm9sIG1hcCBsYXllcnMuIEFzIGNoYW5nZXMgYXJlIG1hZGUgdG8gdGhlIGlucHV0IGFycmF5IG9mXG4gKiBsYXllcnMsIHRoZSBtYXAgaXMgc3luY2hlZCB0byB0aGUgYXJyYXkuIEFzIGxheWVycyBhcmUgYWRkZWQgb3IgcmVtb3ZlZCBmcm9tIHRoZSBpbnB1dCBhcnJheSwgdGhleVxuICogYXJlIGFsc28gYWRkZWQgb3IgcmVtb3ZlZCBmcm9tIHRoZSBtYXAuIFRoZSBpbnB1dCBhcnJheSBpcyB0cmVhdGVkIGFzIGltbXV0YWJsZS4gVG8gZGV0ZWN0IGNoYW5nZXMsXG4gKiB5b3UgbXVzdCBjaGFuZ2UgdGhlIGFycmF5IGluc3RhbmNlLlxuICpcbiAqIEltcG9ydGFudCBOb3RlOiBUaGUgaW5wdXQgbGF5ZXJzIGFycmF5IGlzIGFzc3VtZWQgdG8gYmUgaW1tdXRhYmxlLiBUaGlzIG1lYW5zIHlvdSBuZWVkIHRvIHVzZSBhblxuICogaW1tdXRhYmxlIGFycmF5IGltcGxlbWVudGF0aW9uIG9yIGNyZWF0ZSBhIG5ldyBjb3B5IG9mIHlvdXIgYXJyYXkgd2hlbiB5b3UgbWFrZSBjaGFuZ2VzLCBvdGhlcndpc2VcbiAqIHRoaXMgZGlyZWN0aXZlIHdvbid0IGRldGVjdCB0aGUgY2hhbmdlLiBUaGlzIGlzIGJ5IGRlc2lnbi4gSXQncyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gQ2hhbmdlXG4gKiBkZXRlY3Rpb24gb2YgbXV0YWJsZSBhcnJheXMgcmVxdWlyZXMgZGlmZmluZyB0aGUgc3RhdGUgb2YgdGhlIGFycmF5IG9uIGV2ZXJ5IERvQ2hlY2sgY3ljbGUsIHdoaWNoXG4gKiBpcyBleHRyZW1lbHkgZXhwZW5zaXZlIGZyb20gYSB0aW1lIGNvbXBsZXhpdHkgcGVyc3BlY3RpdmUuXG4gKlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMZWFmbGV0TGF5ZXJzRGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjaywgT25EZXN0cm95LCBPbkluaXQge1xuICAgIHByaXZhdGUgZGlmZmVycztcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgbGF5ZXJzVmFsdWU6IExheWVyW107XG4gICAgbGF5ZXJzRGlmZmVyOiBJdGVyYWJsZURpZmZlcjxMYXllcj47XG4gICAgc2V0IGxheWVycyh2OiBMYXllcltdKTtcbiAgICBnZXQgbGF5ZXJzKCk6IExheWVyW107XG4gICAgcHJpdmF0ZSBsZWFmbGV0RGlyZWN0aXZlO1xuICAgIGNvbnN0cnVjdG9yKGxlYWZsZXREaXJlY3RpdmU6IExlYWZsZXREaXJlY3RpdmUsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywgem9uZTogTmdab25lKTtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBzdGF0ZSBvZiB0aGUgbGF5ZXJzLlxuICAgICAqIFdlIHVzZSBhbiBpdGVyYWJsZSBkaWZmZXIgdG8gc3luY2hyb25pemUgdGhlIG1hcCBsYXllcnMgd2l0aCB0aGUgc3RhdGUgb2YgdGhlIGJvdW5kIGxheWVycyBhcnJheS5cbiAgICAgKiBUaGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIGl0IGFsbG93cyB1cyB0byByZWFjdCB0byBjaGFuZ2VzIHRvIHRoZSBjb250ZW50cyBvZiB0aGUgYXJyYXkgYXMgd2VsbFxuICAgICAqIGFzIGNoYW5nZXMgdG8gdGhlIGFjdHVhbCBhcnJheSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZUxheWVycztcbn1cbiJdfQ==
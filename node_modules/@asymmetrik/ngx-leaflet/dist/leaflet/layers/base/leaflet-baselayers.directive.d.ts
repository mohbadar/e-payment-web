import { DoCheck, EventEmitter, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';
import { Control, Layer } from 'leaflet';
import { LeafletDirective } from '../../core/leaflet.directive';
/**
 * Baselayers directive
 *
 * This directive is provided as a convenient way to add baselayers to the map. The input accepts
 * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is
 * used to determine what changed so that layers are appropriately added or removed. This directive
 * will also add the layers control so users can switch between available base layers.
 *
 * To specify which layer to show as the 'active' baselayer, you will want to add it to the map
 * using the layers directive. Otherwise, the plugin will use the last one it sees.
 */
import * as ɵngcc0 from '@angular/core';
export declare class LeafletBaseLayersDirective implements DoCheck, OnDestroy, OnInit {
    private differs;
    private zone;
    baseLayersValue: {
        [name: string]: Layer;
    };
    baseLayersDiffer: KeyValueDiffer<string, Layer>;
    set baseLayers(v: {
        [name: string]: Layer;
    });
    get baseLayers(): {
        [name: string]: Layer;
    };
    layersControlOptions: Control.LayersOptions;
    layersControlReady: EventEmitter<Control.Layers>;
    private baseLayer;
    private leafletDirective;
    private controlLayers;
    constructor(leafletDirective: LeafletDirective, differs: KeyValueDiffers, zone: NgZone);
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    protected updateBaseLayers(): void;
    /**
     * Check the current base layer and change it to the new one if necessary
     */
    protected syncBaseLayer(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletBaseLayersDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletBaseLayersDirective, "[leafletBaseLayers]", never, { "baseLayers": "leafletBaseLayers"; "layersControlOptions": "leafletLayersControlOptions"; }, { "layersControlReady": "leafletLayersControlReady"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC1iYXNlbGF5ZXJzLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJsZWFmbGV0LWJhc2VsYXllcnMuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9DaGVjaywgRXZlbnRFbWl0dGVyLCBLZXlWYWx1ZURpZmZlciwgS2V5VmFsdWVEaWZmZXJzLCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sLCBMYXllciB9IGZyb20gJ2xlYWZsZXQnO1xuaW1wb3J0IHsgTGVhZmxldERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2NvcmUvbGVhZmxldC5kaXJlY3RpdmUnO1xuLyoqXG4gKiBCYXNlbGF5ZXJzIGRpcmVjdGl2ZVxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGlzIHByb3ZpZGVkIGFzIGEgY29udmVuaWVudCB3YXkgdG8gYWRkIGJhc2VsYXllcnMgdG8gdGhlIG1hcC4gVGhlIGlucHV0IGFjY2VwdHNcbiAqIGEga2V5LXZhbHVlIG1hcCBvZiBsYXllciBuYW1lIC0+IGxheWVyLiBNdXRhYmxlIGNoYW5nZWQgYXJlIGRldGVjdGVkLiBPbiBjaGFuZ2VzLCBhIGRpZmZlciBpc1xuICogdXNlZCB0byBkZXRlcm1pbmUgd2hhdCBjaGFuZ2VkIHNvIHRoYXQgbGF5ZXJzIGFyZSBhcHByb3ByaWF0ZWx5IGFkZGVkIG9yIHJlbW92ZWQuIFRoaXMgZGlyZWN0aXZlXG4gKiB3aWxsIGFsc28gYWRkIHRoZSBsYXllcnMgY29udHJvbCBzbyB1c2VycyBjYW4gc3dpdGNoIGJldHdlZW4gYXZhaWxhYmxlIGJhc2UgbGF5ZXJzLlxuICpcbiAqIFRvIHNwZWNpZnkgd2hpY2ggbGF5ZXIgdG8gc2hvdyBhcyB0aGUgJ2FjdGl2ZScgYmFzZWxheWVyLCB5b3Ugd2lsbCB3YW50IHRvIGFkZCBpdCB0byB0aGUgbWFwXG4gKiB1c2luZyB0aGUgbGF5ZXJzIGRpcmVjdGl2ZS4gT3RoZXJ3aXNlLCB0aGUgcGx1Z2luIHdpbGwgdXNlIHRoZSBsYXN0IG9uZSBpdCBzZWVzLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMZWFmbGV0QmFzZUxheWVyc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgICBwcml2YXRlIGRpZmZlcnM7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIGJhc2VMYXllcnNWYWx1ZToge1xuICAgICAgICBbbmFtZTogc3RyaW5nXTogTGF5ZXI7XG4gICAgfTtcbiAgICBiYXNlTGF5ZXJzRGlmZmVyOiBLZXlWYWx1ZURpZmZlcjxzdHJpbmcsIExheWVyPjtcbiAgICBzZXQgYmFzZUxheWVycyh2OiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBMYXllcjtcbiAgICB9KTtcbiAgICBnZXQgYmFzZUxheWVycygpOiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBMYXllcjtcbiAgICB9O1xuICAgIGxheWVyc0NvbnRyb2xPcHRpb25zOiBDb250cm9sLkxheWVyc09wdGlvbnM7XG4gICAgbGF5ZXJzQ29udHJvbFJlYWR5OiBFdmVudEVtaXR0ZXI8Q29udHJvbC5MYXllcnM+O1xuICAgIHByaXZhdGUgYmFzZUxheWVyO1xuICAgIHByaXZhdGUgbGVhZmxldERpcmVjdGl2ZTtcbiAgICBwcml2YXRlIGNvbnRyb2xMYXllcnM7XG4gICAgY29uc3RydWN0b3IobGVhZmxldERpcmVjdGl2ZTogTGVhZmxldERpcmVjdGl2ZSwgZGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQmFzZUxheWVycygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSBjdXJyZW50IGJhc2UgbGF5ZXIgYW5kIGNoYW5nZSBpdCB0byB0aGUgbmV3IG9uZSBpZiBuZWNlc3NhcnlcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc3luY0Jhc2VMYXllcigpOiB2b2lkO1xufVxuIl19
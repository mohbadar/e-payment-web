import { OnChanges, SimpleChanges, EventEmitter, ElementRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { HighlightJS } from './highlight.service';
import { HighlightOptions, HighlightResult } from './highlight.model';
import * as ɵngcc0 from '@angular/core';
export declare class Highlight implements OnChanges {
    private _hljs;
    private _sanitizer;
    private _options;
    private readonly _nativeElement;
    private _lineNumbersObs;
    code: string;
    languages: string[];
    lineNumbers: boolean;
    highlighted: EventEmitter<HighlightResult>;
    constructor(el: ElementRef, _hljs: HighlightJS, _sanitizer: DomSanitizer, _options: HighlightOptions);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Highlighting with language detection and fix markup.
     * @param code Accepts a string with the code to highlight
     * @param languages An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightElement(code: string, languages?: string[]): void;
    private addLineNumbers;
    private destroyLineNumbersObserver;
    private setTextContent;
    private setInnerHTML;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Highlight, [null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Highlight, "[highlight]", never, { "code": "highlight"; "languages": "languages"; "lineNumbers": "lineNumbers"; }, { "highlighted": "highlighted"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmQudHMiLCJzb3VyY2VzIjpbImhpZ2hsaWdodC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgSGlnaGxpZ2h0SlMgfSBmcm9tICcuL2hpZ2hsaWdodC5zZXJ2aWNlJztcbmltcG9ydCB7IEhpZ2hsaWdodE9wdGlvbnMsIEhpZ2hsaWdodFJlc3VsdCB9IGZyb20gJy4vaGlnaGxpZ2h0Lm1vZGVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEhpZ2hsaWdodCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBfaGxqcztcbiAgICBwcml2YXRlIF9zYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBfb3B0aW9ucztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9uYXRpdmVFbGVtZW50O1xuICAgIHByaXZhdGUgX2xpbmVOdW1iZXJzT2JzO1xuICAgIGNvZGU6IHN0cmluZztcbiAgICBsYW5ndWFnZXM6IHN0cmluZ1tdO1xuICAgIGxpbmVOdW1iZXJzOiBib29sZWFuO1xuICAgIGhpZ2hsaWdodGVkOiBFdmVudEVtaXR0ZXI8SGlnaGxpZ2h0UmVzdWx0PjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgX2hsanM6IEhpZ2hsaWdodEpTLCBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIF9vcHRpb25zOiBIaWdobGlnaHRPcHRpb25zKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24gYW5kIGZpeCBtYXJrdXAuXG4gICAgICogQHBhcmFtIGNvZGUgQWNjZXB0cyBhIHN0cmluZyB3aXRoIHRoZSBjb2RlIHRvIGhpZ2hsaWdodFxuICAgICAqIEBwYXJhbSBsYW5ndWFnZXMgQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMgcmVzdHJpY3RpbmcgZGV0ZWN0aW9uIHRvIG9ubHkgdGhvc2UgbGFuZ3VhZ2VzLlxuICAgICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXG4gICAgICovXG4gICAgaGlnaGxpZ2h0RWxlbWVudChjb2RlOiBzdHJpbmcsIGxhbmd1YWdlcz86IHN0cmluZ1tdKTogdm9pZDtcbiAgICBwcml2YXRlIGFkZExpbmVOdW1iZXJzO1xuICAgIHByaXZhdGUgZGVzdHJveUxpbmVOdW1iZXJzT2JzZXJ2ZXI7XG4gICAgcHJpdmF0ZSBzZXRUZXh0Q29udGVudDtcbiAgICBwcml2YXRlIHNldElubmVySFRNTDtcbn1cbiJdfQ==
import { Observable } from 'rxjs';
import { HighlightConfig, HighlightResult, HighlightLibrary, HighlightOptions } from './highlight.model';
import { HighlightLoader } from './highlight.loader';
import * as ɵngcc0 from '@angular/core';
export declare class HighlightJS {
    private _loader;
    private _hljs;
    get hljs(): HighlightLibrary | null;
    constructor(_loader: HighlightLoader, options: HighlightOptions);
    /**
     * Core highlighting function.
     * @param name Accepts a language name, or an alias
     * @param value A string with the code to highlight.
     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     */
    highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): Observable<HighlightResult>;
    /**
     * Highlighting with language detection.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightAuto(value: string, languageSubset: string[]): Observable<HighlightResult>;
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param value Accepts a string with the highlighted markup
     */
    fixMarkup(value: string): Observable<string>;
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param block The element to apply highlight on.
     */
    highlightBlock(block: HTMLElement): Observable<void>;
    /**
     * Configures global options:
     * @param config HighlightJs configuration argument
     */
    configure(config: HighlightConfig): Observable<void>;
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     */
    initHighlighting(): Observable<void>;
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param name A string with the name of the language being registered
     * @param language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     */
    registerLanguage(name: string, language: () => any): Observable<HighlightLibrary>;
    /**
     * @return The languages names list.
     */
    listLanguages(): Observable<string[]>;
    /**
     * Looks up a language by name or alias.
     * @param name Language name
     * @return The language object if found, undefined otherwise.
     */
    getLanguage(name: string): Observable<any>;
    /**
     * Display line numbers
     * @param el Code element
     */
    lineNumbersBlock(el: HTMLElement): Observable<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HighlightJS, [null, { optional: true; }]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiaGlnaGxpZ2h0LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBIaWdobGlnaHRDb25maWcsIEhpZ2hsaWdodFJlc3VsdCwgSGlnaGxpZ2h0TGlicmFyeSwgSGlnaGxpZ2h0T3B0aW9ucyB9IGZyb20gJy4vaGlnaGxpZ2h0Lm1vZGVsJztcbmltcG9ydCB7IEhpZ2hsaWdodExvYWRlciB9IGZyb20gJy4vaGlnaGxpZ2h0LmxvYWRlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBIaWdobGlnaHRKUyB7XG4gICAgcHJpdmF0ZSBfbG9hZGVyO1xuICAgIHByaXZhdGUgX2hsanM7XG4gICAgZ2V0IGhsanMoKTogSGlnaGxpZ2h0TGlicmFyeSB8IG51bGw7XG4gICAgY29uc3RydWN0b3IoX2xvYWRlcjogSGlnaGxpZ2h0TG9hZGVyLCBvcHRpb25zOiBIaWdobGlnaHRPcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBDb3JlIGhpZ2hsaWdodGluZyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gbmFtZSBBY2NlcHRzIGEgbGFuZ3VhZ2UgbmFtZSwgb3IgYW4gYWxpYXNcbiAgICAgKiBAcGFyYW0gdmFsdWUgQSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHQuXG4gICAgICogQHBhcmFtIGlnbm9yZV9pbGxlZ2FscyBXaGVuIHByZXNlbnQgYW5kIGV2YWx1YXRlcyB0byBhIHRydWUgdmFsdWUsIGZvcmNlcyBoaWdobGlnaHRpbmcgdG8gZmluaXNoXG4gICAgICogZXZlbiBpbiBjYXNlIG9mIGRldGVjdGluZyBpbGxlZ2FsIHN5bnRheCBmb3IgdGhlIGxhbmd1YWdlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxuICAgICAqIEBwYXJhbSBjb250aW51YXRpb24gQW4gb3B0aW9uYWwgbW9kZSBzdGFjayByZXByZXNlbnRpbmcgdW5maW5pc2hlZCBwYXJzaW5nLlxuICAgICAqIFdoZW4gcHJlc2VudCwgdGhlIGZ1bmN0aW9uIHdpbGwgcmVzdGFydCBwYXJzaW5nIGZyb20gdGhpcyBzdGF0ZSBpbnN0ZWFkIG9mIGluaXRpYWxpemluZyBhIG5ldyBvbmVcbiAgICAgKi9cbiAgICBoaWdobGlnaHQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBpZ25vcmVfaWxsZWdhbHM6IGJvb2xlYW4sIGNvbnRpbnVhdGlvbj86IGFueSk6IE9ic2VydmFibGU8SGlnaGxpZ2h0UmVzdWx0PjtcbiAgICAvKipcbiAgICAgKiBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24uXG4gICAgICogQHBhcmFtIHZhbHVlIEFjY2VwdHMgYSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHRcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VTdWJzZXQgQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMgcmVzdHJpY3RpbmcgZGV0ZWN0aW9uIHRvIG9ubHkgdGhvc2UgbGFuZ3VhZ2VzLlxuICAgICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXG4gICAgICovXG4gICAgaGlnaGxpZ2h0QXV0byh2YWx1ZTogc3RyaW5nLCBsYW5ndWFnZVN1YnNldDogc3RyaW5nW10pOiBPYnNlcnZhYmxlPEhpZ2hsaWdodFJlc3VsdD47XG4gICAgLyoqXG4gICAgICogUG9zdC1wcm9jZXNzaW5nIG9mIHRoZSBoaWdobGlnaHRlZCBtYXJrdXAuXG4gICAgICogQ3VycmVudGx5IGNvbnNpc3RzIG9mIHJlcGxhY2luZyBpbmRlbnRhdGlvbiBUQUIgY2hhcmFjdGVycyBhbmQgdXNpbmcgPGJyPiB0YWdzIGluc3RlYWQgb2YgbmV3LWxpbmUgY2hhcmFjdGVycy5cbiAgICAgKiBPcHRpb25zIGFyZSBzZXQgZ2xvYmFsbHkgd2l0aCBjb25maWd1cmUuXG4gICAgICogQHBhcmFtIHZhbHVlIEFjY2VwdHMgYSBzdHJpbmcgd2l0aCB0aGUgaGlnaGxpZ2h0ZWQgbWFya3VwXG4gICAgICovXG4gICAgZml4TWFya3VwKHZhbHVlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYSBET00gbm9kZSBjb250YWluaW5nIGNvZGUuXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgbGFuZ3VhZ2UgZGV0ZWN0aW9uIGJ5IGRlZmF1bHQgYnV0IHlvdSBjYW4gc3BlY2lmeSB0aGUgbGFuZ3VhZ2UgaW4gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvZiB0aGUgRE9NIG5vZGUuXG4gICAgICogU2VlIHRoZSBjbGFzcyByZWZlcmVuY2UgZm9yIGFsbCBhdmFpbGFibGUgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMuXG4gICAgICogQHBhcmFtIGJsb2NrIFRoZSBlbGVtZW50IHRvIGFwcGx5IGhpZ2hsaWdodCBvbi5cbiAgICAgKi9cbiAgICBoaWdobGlnaHRCbG9jayhibG9jazogSFRNTEVsZW1lbnQpOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgZ2xvYmFsIG9wdGlvbnM6XG4gICAgICogQHBhcmFtIGNvbmZpZyBIaWdobGlnaHRKcyBjb25maWd1cmF0aW9uIGFyZ3VtZW50XG4gICAgICovXG4gICAgY29uZmlndXJlKGNvbmZpZzogSGlnaGxpZ2h0Q29uZmlnKTogT2JzZXJ2YWJsZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGhpZ2hsaWdodGluZyB0byBhbGwgPHByZT48Y29kZT4uLjwvY29kZT48L3ByZT4gYmxvY2tzIG9uIGEgcGFnZS5cbiAgICAgKi9cbiAgICBpbml0SGlnaGxpZ2h0aW5nKCk6IE9ic2VydmFibGU8dm9pZD47XG4gICAgLyoqXG4gICAgICogQWRkcyBuZXcgbGFuZ3VhZ2UgdG8gdGhlIGxpYnJhcnkgdW5kZXIgdGhlIHNwZWNpZmllZCBuYW1lLiBVc2VkIG1vc3RseSBpbnRlcm5hbGx5LlxuICAgICAqIEBwYXJhbSBuYW1lIEEgc3RyaW5nIHdpdGggdGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIGJlaW5nIHJlZ2lzdGVyZWRcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2UgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIGxhbmd1YWdlIGRlZmluaXRpb24uXG4gICAgICogVGhlIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgaGxqcyBvYmplY3QgdG8gYmUgYWJsZSB0byB1c2UgY29tbW9uIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZGVmaW5lZCB3aXRoaW4gaXQuXG4gICAgICovXG4gICAgcmVnaXN0ZXJMYW5ndWFnZShuYW1lOiBzdHJpbmcsIGxhbmd1YWdlOiAoKSA9PiBhbnkpOiBPYnNlcnZhYmxlPEhpZ2hsaWdodExpYnJhcnk+O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gVGhlIGxhbmd1YWdlcyBuYW1lcyBsaXN0LlxuICAgICAqL1xuICAgIGxpc3RMYW5ndWFnZXMoKTogT2JzZXJ2YWJsZTxzdHJpbmdbXT47XG4gICAgLyoqXG4gICAgICogTG9va3MgdXAgYSBsYW5ndWFnZSBieSBuYW1lIG9yIGFsaWFzLlxuICAgICAqIEBwYXJhbSBuYW1lIExhbmd1YWdlIG5hbWVcbiAgICAgKiBAcmV0dXJuIFRoZSBsYW5ndWFnZSBvYmplY3QgaWYgZm91bmQsIHVuZGVmaW5lZCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgZ2V0TGFuZ3VhZ2UobmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgbGluZSBudW1iZXJzXG4gICAgICogQHBhcmFtIGVsIENvZGUgZWxlbWVudFxuICAgICAqL1xuICAgIGxpbmVOdW1iZXJzQmxvY2soZWw6IEhUTUxFbGVtZW50KTogT2JzZXJ2YWJsZTxhbnk+O1xufVxuIl19
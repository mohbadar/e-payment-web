{"version":3,"file":"ngx-highlightjs-plus.js","sources":["ng:/ngx-highlightjs/plus/gist.model.ts","ng:/ngx-highlightjs/plus/code-loader.ts","ng:/ngx-highlightjs/plus/gist.ts","ng:/ngx-highlightjs/plus/code-from-url.ts","ng:/ngx-highlightjs/plus/highlight-plus.module.ts","ng:/ngx-highlightjs/plus/ngx-highlightjs-plus.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface GistOptions {\n  clientId: string;\n  clientSecret: string;\n}\n\nexport const GIST_OPTIONS = new InjectionToken<GistOptions>('GIST_OPTIONS');\n\ninterface Owner {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface User {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface ChangeStatus {\n  total: number;\n  additions: number;\n  deletions: number;\n}\n\ninterface History {\n  user: User;\n  version: string;\n  committed_at: Date;\n  change_status: ChangeStatus;\n  url: string;\n}\n\ninterface Files {\n  [fileName: string]: {\n    filename: string;\n    type: string;\n    language: string;\n    raw_url: string;\n    size: number;\n    truncated: boolean;\n    content: string;\n  };\n}\n\nexport interface Gist {\n  url: string;\n  forks_url: string;\n  commits_url: string;\n  id: string;\n  node_id: string;\n  git_pull_url: string;\n  git_push_url: string;\n  html_url: string;\n  files: Files;\n  public: boolean;\n  created_at: Date;\n  updated_at: Date;\n  description: string;\n  comments: number;\n  user?: any;\n  comments_url: string;\n  owner: Owner;\n  forks: any[];\n  history: History[];\n  truncated: boolean;\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\nimport { catchError, publishReplay, refCount } from 'rxjs/operators';\nimport { Gist, GIST_OPTIONS, GistOptions } from './gist.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeLoader {\n  constructor(private _http: HttpClient, @Optional() @Inject(GIST_OPTIONS) private _options: GistOptions) {\n  }\n\n  /**\n   * Get plus code\n   * @param id Gist ID\n   */\n  getCodeFromGist(id: string): Observable<Gist> {\n    let params: HttpParams;\n    if (this.isOAuthProvided()) {\n      params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);\n    }\n    return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });\n  }\n\n  /**\n   * Get code by URL\n   * @param url File raw link\n   */\n  getCodeFromUrl(url: string): Observable<string> {\n    return this.fetchFile(url, { responseType: 'text' });\n  }\n\n  /**\n   * Check if OAuth option is provided\n   */\n  private isOAuthProvided(): boolean {\n    return !!this._options && !!this._options.clientId && !!this._options.clientSecret;\n  }\n\n  private fetchFile(url: string, options: any): Observable<any> {\n    // Check if URL is valid\n    if (isUrl(url)) {\n      return this._http.get(url, options).pipe(\n        // Catch response\n        publishReplay(1),\n        refCount(),\n        catchError((err: Error) => {\n          console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);\n          return EMPTY;\n        })\n      );\n    }\n    return EMPTY;\n  }\n\n}\n\nfunction isUrl(url: string) {\n  const regExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n  return regExp.test(url);\n}\n","import { Directive, Pipe, Input, Output, PipeTransform, EventEmitter } from '@angular/core';\nimport { CodeLoader } from './code-loader';\nimport { Gist } from './gist.model';\n\n@Directive({\n  selector: '[gist]'\n})\nexport class GistDirective {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  @Input()\n  private set gist(value: string) {\n    if (value) {\n      this._loader.getCodeFromGist(value).subscribe((gist: Gist) => this.gistLoad.emit(gist));\n    }\n  }\n\n  @Output() gistLoad = new EventEmitter<Gist>();\n}\n\n@Pipe({\n  name: 'gistFile'\n})\nexport class GistFilePipe implements PipeTransform {\n  transform(gist: Gist, fileName: string): string | null {\n    return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CodeLoader } from './code-loader';\n\n@Pipe({\n  name: 'codeFromUrl'\n})\nexport class CodeFromUrlPipe implements PipeTransform {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  transform(url: string): Observable<string> {\n    return this._loader.getCodeFromUrl(url);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HighlightModule } from 'ngx-highlightjs';\n// Uncomment the following line for development\n// import { HighlightModule } from '../../src/public-api';\nimport { GistFilePipe, GistDirective } from './gist';\nimport { CodeFromUrlPipe } from './code-from-url';\n\n@NgModule({\n  imports: [\n    HighlightModule,\n    HttpClientModule\n  ],\n  declarations: [\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ],\n  exports: [\n    HighlightModule,\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ]\n})\nexport class HighlightPlusModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}